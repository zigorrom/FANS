using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
namespace FANS.classes
{
    
    class MeasurementThread
    {
        public delegate void SomeMeasurement();
        public static bool MeasurementInProgress;


        private Thread _Measurement;

        private static MeasurementThread _instance;
        public static MeasurementThread Instance
        {
            get
            {
                if (_instance == null) _instance = new MeasurementThread();
                return _instance;

            }
        }

        public bool MeasurementRunning
        {
            get
            {
                return MeasurementInProgress;
            }
            set
            {
                if (MeasurementInProgress)
                {
                    if (value == false)
                        this.StopThread();
                }
            }              
                    
            
        }

        public void StartThread(SomeMeasurement DesiredFunction)
        {
            _Measurement = new Thread(new ThreadStart(DesiredFunction));
            AllCustomEvents.Instance.OnBeforeMeasurementsStarted(this, null);
            MeasurementInProgress = true;
            _Measurement.Start();
        }
        public void StopThread()
        {
            MeasurementInProgress = false;
            _Measurement.Join();
            AllCustomEvents.Instance.OnMeasurementStopped(this, null);
        }

        
    }
}
