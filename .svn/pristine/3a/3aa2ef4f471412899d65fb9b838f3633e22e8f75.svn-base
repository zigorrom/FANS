using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Ivi.Visa.Interop;
using FANS.interfaces;
using FANS;
namespace FANS.classes
{

  class Agilent_USB_DAQ:SCPI_Device
    {
       private ResourceManager _rMgr;
        private FormattedIO488 _src;
        private string _Id;
        private bool _Alive;
        private bool _Busy;
        private static Agilent_USB_DAQ _instance;
        public static Agilent_USB_DAQ Instance {
            get
            {
                if (_instance == null) _instance= new Agilent_USB_DAQ();
                return _instance;

            }
        }


        private Agilent_USB_DAQ()
        {
            _Id = "USB0::0x0957::0x1718::TW52524501::INSTR";
            _rMgr = new ResourceManager();
            _src = new FormattedIO488();
            _Alive = false;
            _Busy = false;
        }
      private void _SetBusy()
      {
          _Busy = true;
      }
      private void _SetNotBusy()
      {
          _Busy = false;
      }
      public bool isBusy()
      {
          return _Busy;
      }
        public void SetId(string Id)
        {
            _Id = Id;
        }
        public bool Open()
        {
            this._SetBusy();
            try
            {
                this._src.IO = (IMessage)this._rMgr.Open(this._Id);
                _Alive = true;
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message);
                return false;
            }
            this._SetNotBusy();
            return true;
        }
        public bool isAlive()
        {
            return _Alive;
        }
        public bool Open(string Id)
        {
            this.SetId(Id);
            return this.Open();
            
        }
        public bool WriteString(string WhatToWrite)
        {
            if (this.isBusy()) { throw new Exception("Device is busy");  }
            this._SetBusy();
            try { CheckValue.assertTrue(_Alive,"No Device Opened"); }
            catch (Exception e) { MessageBox.Show(e.Message); return false; }
            try
            {
                _src.WriteString(WhatToWrite);
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message);
                return false;
            }
            this._SetNotBusy();
            return true;
        }
   
        public string QueryString(string Query)
        {
            this.WriteString(Query);
            return this.ReadString();
        }
        public string ReadString()
        {
            if (this.isBusy()) { throw new Exception("Device is busy");  }
            this._SetBusy();
        try { CheckValue.assertTrue(_Alive,"No Device Opened"); }
        catch (Exception e) { MessageBox.Show(e.Message); return null; }
        try 
            {
                      
                string result = _src.ReadString();
                this._SetNotBusy();
            return result;
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message);
                this._SetNotBusy();
                return null;
            }
                
        }

      public void Close()
        {
            _src.IO.Close();
          
        }

    }
    
}
