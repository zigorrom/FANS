using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZedGraph;
namespace FANS.classes
{
   

    class TimeTracesAcquisition
    {

        private AI_Channels _Channels;
        private Agilent_AnalogInput_LowLevel _AI;
        public TimeTracesAcquisition()
        {
            _AI = new Agilent_AnalogInput_LowLevel();
            _Channels = AI_Channels.Instance;
            _Channels.Read_AI_Channel_Status();
            
        }

       
        
        public void SetSamplingRate(int SamplingRate)
        {
            _AI.tryToWriteString("ACQ:SRAT " + SamplingRate + "");
        }
        public void SetPointsPerBlockValue(int PointsPerBlock)
        {
            _AI.tryToWriteString("WAV:POIN " + PointsPerBlock + "");
        }
        public void SetSingleShotPointsPerBlockValue(int PointsPerBlock)
        {
            _AI.tryToWriteString("ACQ:POIN " + PointsPerBlock + "");
            
        }
        public void StartAnalogAcqusition()
        {
            _AI.tryToWriteString("RUN");
        }
        public void AcquireSingleShot()
        {
            _AI.tryToWriteString("DIG");
        }
        public void ContiniousAcquisition()
        {
            _Channels.Read_AI_Channel_Status();
            int ACQ_Rate = _Channels.ReadAcquisitionRate();
            this.StartAnalogAcqusition();
            while (MeasurementThread.Instance.MeasurementRunning)
            {
                while (!Agilent_USB_DAQ.Instance.CheckAcquisitionStatus()) ;
                string result = Agilent_USB_DAQ.Instance.QueryString("WAV:DATA?");
                int[] resultInt = _AI.ParseDataStringToInt(result);
                PointPairList[] ChannelData = _ParseIntArrayIntoChannelData(resultInt, ACQ_Rate);
                AllCustomEvents.Instance.OnAI_Data_Arrived(this, new ADC_DataArrivedEventArgs(ChannelData, result));
            }
            StopAnalogAcqusition();
        }
        public void MakeSingleShot()
        {
            _Channels.Read_AI_Channel_Status();
            int ACQ_Rate = _Channels.ReadAcquisitionRate();
            this.AcquireSingleShot();

            while (!Agilent_USB_DAQ.Instance.CheckSingleShotAcquisitionStatus()) ;
            string result = Agilent_USB_DAQ.Instance.QueryString("WAV:DATA?");
            int[] resultInt = _AI.ParseDataStringToInt(result);
            PointPairList[] ChannelData = _ParseIntArrayIntoChannelData(resultInt, ACQ_Rate);
            AllCustomEvents.Instance.OnAI_Data_Arrived(this, new ADC_DataArrivedEventArgs(ChannelData));
        }

        private PointPairList[] _ParseIntArrayIntoChannelData(int[] IntArray,int ACQ_Rate)
        {
            PointPairList[] result = new PointPairList[4];
            for (int i = 0; i < 4; i++) result[i] = new PointPairList();
            List<AI_Channel> not_workingChannels = new List<AI_Channel>();
            List<AI_Channel> workingChannels = new List<AI_Channel>();
            double value, time;
            foreach (AI_Channel ch in _Channels.ChannelArray)
            {
                if (ch.Enabled) workingChannels.Add(ch);
                else not_workingChannels.Add(ch);
            }
            for (int i = 0; i < IntArray.Length; i += workingChannels.Count)
            {

                time = (double)i / workingChannels.Count / ACQ_Rate;
                int j = i;
                foreach (AI_Channel workingChannel in workingChannels)
                {

                    if (workingChannel.isBiPolarAC)
                        value = IntArray[j] * 2 * workingChannel.AC_Range / 65536;
                    else
                        value = (IntArray[j] / 65536 + 0.5) * workingChannel.AC_Range;
                    result[workingChannel.number - 101].Add(time, value);
                    j++;
                }

                foreach (AI_Channel not_workingChannel in not_workingChannels)
                {
                    result[not_workingChannel.number - 101].Add(time, 0);
                }


            }
            return result;
        }

        public void StopAnalogAcqusition()
        {
            _AI.tryToWriteString("STOP");
        }

    }
}

