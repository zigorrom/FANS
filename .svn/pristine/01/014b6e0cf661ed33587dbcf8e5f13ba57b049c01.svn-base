using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FANS.classes
{
    class VoltageMeasurement
    {
        private Agilent_AnalogInput_LowLevel _AI;
        public VoltageMeasurement()
        {
            _AI = new Agilent_AnalogInput_LowLevel();
        }

        public void MeasureVoltagePreciseInThread()
        {
            if (MeasurementThread.Instance.MeasurementRunning) { AllCustomEvents.Instance.MeasurementFinished += RecallPreciseVoltageMeasurement; }
            MeasurementThread.Instance.StartThread(PerformVoltagePresiseMeasurement);
        }

        public void MeasureVoltageNormallyInThread()
        {
            if (MeasurementThread.Instance.MeasurementRunning) { return; }
            MeasurementThread.Instance.StartThread(PerformVoltageNormalMeasurement);
        }

        private void RecallPreciseVoltageMeasurement(object sender, EventArgs e)
        {
            AllCustomEvents.Instance.MeasurementFinished -= RecallPreciseVoltageMeasurement;
            MeasureVoltagePreciseInThread();
        }
        private void PerformVoltagePresiseMeasurement()
        {
            int prevAverage = AI_Channels.Instance.getDC_Average();
            AI_Channels.Instance.setDC_Average(1000);
            double[] result = AI_Channels.Instance.VoltageMeasurement101_104();
            AI_Channels.Instance.setDC_Average(prevAverage);
            AllCustomEvents.Instance.OnVoltagesMeasurementDone(this, new MeasuredVoltages_DataArrivedEventArgs(result, true));
        }

        private void PerformVoltageNormalMeasurement()
        {
            double[] result = AI_Channels.Instance.VoltageMeasurement101_104();
            AllCustomEvents.Instance.OnVoltagesMeasurementDone(this, new MeasuredVoltages_DataArrivedEventArgs(result, false));
        }
        


        
        
    }
}
