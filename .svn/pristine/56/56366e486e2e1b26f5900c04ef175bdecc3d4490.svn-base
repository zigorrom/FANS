using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FANS.classes
{
    class AllCustomEvents
    {
        private static AllCustomEvents _instance;
        public static AllCustomEvents Instance
        {
            get
            {
                if (_instance == null) _instance = new AllCustomEvents();
                return _instance;
            }
        }
        private AllCustomEvents(){
        }

        public virtual void OnAI_Data_Arrived(object Sender, ADC_DataArrivedEventArgs e)
        {
            EventHandler<ADC_DataArrivedEventArgs> handler = _AI_Data_Arrived;
            if (handler != null)
            {
                handler(Sender, e);
            }
        }
        private EventHandler<ADC_DataArrivedEventArgs> _AI_Data_Arrived;
        public event EventHandler<ADC_DataArrivedEventArgs> AI_Data_Arrived
        {
            add
            {
                if (_AI_Data_Arrived == null || !_AI_Data_Arrived.GetInvocationList().Contains(value))
                {
                    _AI_Data_Arrived += value;
                }
            }
            remove
            {
                _AI_Data_Arrived -= value;
            }
        }

        public virtual void OnAI_SingleShot_Data_Arrived(object Sender, ADC_DataArrivedEventArgs e)
        {
            EventHandler<ADC_DataArrivedEventArgs> handler = _AI_SingleShot_Data_Arrived;
            if (handler != null)
            {
                handler(Sender, e);
            }
        }
        private EventHandler<ADC_DataArrivedEventArgs> _AI_SingleShot_Data_Arrived;
        public event EventHandler<ADC_DataArrivedEventArgs> AI_SingleShot_Data_Arrived
        {
            add
            {
                if (_AI_SingleShot_Data_Arrived == null || !_AI_SingleShot_Data_Arrived.GetInvocationList().Contains(value))
                {
                    _AI_SingleShot_Data_Arrived += value;
                }
            }
            remove
            {
                _AI_SingleShot_Data_Arrived -= value;
            }
        }

        private EventHandler<MeasuredVoltages_DataArrivedEventArgs> _VoltagesMeasurementDone;
        public event EventHandler<MeasuredVoltages_DataArrivedEventArgs> VoltagesMeasurementDone
        {
            add
            {
                if (_VoltagesMeasurementDone == null || !_VoltagesMeasurementDone.GetInvocationList().Contains(value))
                {
                    _VoltagesMeasurementDone += value;
                }
            }
            remove
            {
                _VoltagesMeasurementDone -= value;
            }
        }
        public virtual void OnVoltagesMeasurementDone(object sender, MeasuredVoltages_DataArrivedEventArgs e)
        {
            EventHandler<MeasuredVoltages_DataArrivedEventArgs> handler = _VoltagesMeasurementDone;
            if (handler != null)
            {
                handler(sender, e);
            }
        }

        public virtual void OnMeasurementFinished(object Sender, EventArgs e)
        {
            EventHandler<EventArgs> handler = _MeasurementFinished;
            if (handler != null)
            {
                handler(Sender, e);
            }
        }
        private EventHandler<EventArgs> _MeasurementFinished;
        public event EventHandler<EventArgs> MeasurementFinished
        {
            add
            {
                if (_MeasurementFinished == null || !_MeasurementFinished.GetInvocationList().Contains(value))
                {
                    _MeasurementFinished += value;
                }
            }
            remove
            {
                _MeasurementFinished -= value;
            }
        }

        private EventHandler<AC_AutoRangeEventArgs> _AC_AutoRangeComplete;
        public event EventHandler<AC_AutoRangeEventArgs> AC_AutoRangeComplete
        {
            add
            {
                if (_AC_AutoRangeComplete == null || !_AC_AutoRangeComplete.GetInvocationList().Contains(value))
                {
                    _AC_AutoRangeComplete += value;
                }
            }
            remove
            {
                _AC_AutoRangeComplete -= value;
            }
        }
        public virtual void OnAC_AutoRangeComplete(object sender, AC_AutoRangeEventArgs e)
        {
            EventHandler<AC_AutoRangeEventArgs> handler = _AC_AutoRangeComplete;
            if (handler != null)
            {
                handler(sender, e);
            }
        }


        private EventHandler<EventArgs> _AI_Channel_DigitalParameterChange_Started;
        public event EventHandler<EventArgs> AI_Channel_DigitalParameterChange_Started
        {
            add
            {
                if (_AI_Channel_DigitalParameterChange_Started == null || !_AI_Channel_DigitalParameterChange_Started.GetInvocationList().Contains(value))
                {
                    _AI_Channel_DigitalParameterChange_Started += value;
                }
            }
            remove
            {
                _AI_Channel_DigitalParameterChange_Started -= value;
            }
        }
        public virtual void OnAI_Channel_DigitalParameterChange_Started(object sender, EventArgs e)
        {
            EventHandler<EventArgs> handler = _AI_Channel_DigitalParameterChange_Started;
            if (handler != null)
            {
                handler(sender, e);
            }
        }


        private EventHandler<EventArgs> _AI_Channel_DigitalParameterChange_Finished;
        public event EventHandler<EventArgs> AI_Channel_DigitalParameterChange_Finished
        {
            add
            {
                if (_AI_Channel_DigitalParameterChange_Finished == null || !_AI_Channel_DigitalParameterChange_Finished.GetInvocationList().Contains(value))
                {
                    _AI_Channel_DigitalParameterChange_Finished += value;
                }
            }
            remove
            {
                _AI_Channel_DigitalParameterChange_Finished -= value;
            }
        }
        public virtual void OnAI_Channel_DigitalParameterChange_Finished(object sender, EventArgs e)
        {
            EventHandler<EventArgs> handler = _AI_Channel_DigitalParameterChange_Finished;
            if (handler != null)
            {
                handler(sender, e);
            }
        }

    }
}
